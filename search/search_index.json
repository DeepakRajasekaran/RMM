{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Here are Java programs for various tasks you've mentioned: Reverse an Integer: public class ReverseInteger { public static void main(String[] args) { int num = 12345; int reversed = 0; while (num != 0) { int digit = num % 10; reversed = reversed * 10 + digit; num /= 10; } System.out.println(\"Reversed Integer: \" + reversed); } } Check Armstrong Number: public class ArmstrongNumber { public static void main(String[] args) { int num = 153; int originalNum = num; int sum = 0; while (num != 0) { int digit = num % 10; sum += Math.pow(digit, 3); num /= 10; } if (sum == originalNum) { System.out.println(originalNum + \" is an Armstrong number.\"); } else { System.out.println(originalNum + \" is not an Armstrong number.\"); } } } Check Prime Number: public class PrimeNumber { public static void main(String[] args) { int num = 29; boolean isPrime = true; if (num <= 1) { isPrime = false; } else { for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) { isPrime = false; break; } } } if (isPrime) { System.out.println(num + \" is a prime number.\"); } else { System.out.println(num + \" is not a prime number.\"); } } } Fibonacci Series (Iteration): public class FibonacciIteration { public static void main(String[] args) { int n = 10; int first = 0, second = 1; System.out.print(\"Fibonacci Series: \"); for (int i = 0; i < n; i++) { System.out.print(first + \" \"); int next = first + second; first = second; second = next; } } } Fibonacci Series (Recursion): public class FibonacciRecursion { public static void main(String[] args) { int n = 10; System.out.print(\"Fibonacci Series: \"); for (int i = 0; i < n; i++) { System.out.print(fibonacci(i) + \" \"); } } public static int fibonacci(int n) { if (n <= 1) { return n; } else { return fibonacci(n - 1) + fibonacci(n - 2); } } } Check Palindrome (Iteration): public class PalindromeIteration { public static void main(String[] args) { int num = 12321; int originalNum = num; int reversed = 0; while (num != 0) { int digit = num % 10; reversed = reversed * 10 + digit; num /= 10; } if (originalNum == reversed) { System.out.println(originalNum + \" is a palindrome.\"); } else { System.out.println(originalNum + \" is not a palindrome.\"); } } } Check Palindrome (Recursion): public class PalindromeRecursion { public static void main(String[] args) { int num = 12321; int originalNum = num; if (isPalindrome(num, originalNum)) { System.out.println(originalNum + \" is a palindrome.\"); } else { System.out.println(originalNum + \" is not a palindrome.\"); } } public static boolean isPalindrome(int num, int originalNum) { if (num == 0) { return true; } int digit = num % 10; return (digit == originalNum % 10) && isPalindrome(num / 10, originalNum / 10); } } Find Greatest Among Three Integers: public class GreatestAmongThree { public static void main(String[] args) { int a = 10, b = 20, c = 5; int greatest = a; if (b > greatest) { greatest = b; } if (c > greatest) { greatest = c; } System.out.println(\"The greatest number is: \" + greatest); } } Sum of Digits Using Recursion: public class SumOfDigitsRecursion { public static void main(String[] args) { int num = 12345; int sum = sumOfDigits(num); System.out.println(\"Sum of digits of \" + num + \" is: \" + sum); } public static int sumOfDigits(int num) { if (num == 0) { return 0; } else { return num % 10 + sumOfDigits(num / 10); } } } Swap Two Numbers Without Using Third Variable: public class SwapWithoutTemp { public static void main(String[] args) { int a = 5, b = 10; a = a + b; b = a - b; a = a - b; System.out.println(\"After swapping: a = \" + a + \", b = \" + b); } } Swap Two Numbers Using Third Variable: public class SwapWithTemp { public static void main(String[] args) { int a = 5, b = 10; int temp; temp = a; a = b; b = temp; System.out.println(\"After swapping: a = \" + a + \", b = \" + b); } } Find Prime Factors: public class PrimeFactors { public static void main(String[] args) { int num = 36; System.out.print(\"Prime factors of \" + num + \" are: \"); for (int i = 2; i <= num; i++) { while (num % i == 0) { System.out.print(i + \" \"); num /= i; } } } } Add Two Integers Without Arithmetic Operator: public class AddWithoutArithmetic { public static void main(String[] args) { int a = 5, b = 10; while (b != 0) { int carry = a & b; a = a ^ b; b = carry << 1; } System.out.println(\"Sum: \" + a); } } Check for Perfect Number: public class PerfectNumber { public static void main(String[] args) { int num = 28; int sum = 0; for (int i = 1; i < num; i++) { if (num % i == 0) { sum += i; } } if (sum == num) { System.out.println(num + \" is a perfect number.\"); } else { System.out.println(num + \" is not a perfect number.\"); } } } Calculate Average of Integer Array: public class AverageOfArray { public static void main(String[] args) { int[] arr = { 10, 20, 30, 40, 50 }; int sum = 0; for (int num : arr) { sum += num; } double average = (double) sum / arr.length; System.out.println(\"Average: \" + average); } } Calculate Average of Numbers Taken from User: import java.util.Scanner; public class AverageOfNumbers { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int n, sum = 0; System.out.print(\"Enter the number of elements: \"); n = scanner.nextInt(); int[] arr = new int[n]; System.out.println(\"Enter the elements:\"); for (int i = 0; i < n; i++) { arr[i] = scanner.nextInt(); sum += arr[i]; } double average = (double) sum / n; System.out.println(\"Average: \" + average); scanner.close(); } } Calculate Factorial (Iterative): public class FactorialIterative { public static void main(String[] args) { int n = 5; int factorial = 1; for (int i = 1; i <= n; i++) { factorial *= i; } System.out.println(\"Factorial of \" + n + \" is: \" + factorial); } } Calculate Factorial (Recursive): public class FactorialRecursive { public static void main(String[] args) { int n = 5; int factorial = factorial(n); System.out.println(\"Factorial of \" + n + \" is: \" + factorial); } public static int factorial(int n) { if (n == 0 || n == 1) { return 1; } else { return n * factorial(n - 1); } } } Check Even or Odd: public class EvenOrOdd { public static void main(String[] args) { int num = 7; if (num % 2 == 0) { System.out.println(num + \" is even.\"); } else { System.out.println(num + \" is odd.\"); } } } Print First n Prime Numbers: public class FirstNPrimes { public static void main(String[] args) { int n = 10; int count = 0; int num = 2; System.out.print(\"First \" + n + \" prime numbers: \"); while (count < n) { boolean isPrime = true; for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) { isPrime = false; break; } } if (isPrime) { System.out.print(num + \" \"); count++; } num++; } } } Print Prime Numbers in a Given Range: public class PrimeInRange { public static void main(String[] args) { int start = 10; int end = 50; System.out.print(\"Prime numbers between \" + start + \" and \" + end + \": \"); for (int num = start; num <= end; num++) { if (isPrime(num)) { System.out.print(num + \" \"); } } } public static boolean isPrime(int num) { if (num <= 1) { return false; } for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) { return false; } } return true; } } Find Smallest Number Among Three: public class SmallestAmongThree { public static void main(String[] args) { int a = 10, b = 5, c = 15; int smallest = a; if (b < smallest) { smallest = b; } if (c < smallest) { smallest = c; } System.out.println(\"The smallest number is: \" + smallest); } } Calculate Power Using Math.pow Method: public class PowerWithMathPow { public static void main(String[] args) { double base = 2; double exponent = 3; double result = Math.pow(base, exponent); System.out.println(base + \" ^ \" + exponent + \" = \" + result); } } Calculate Power Without Using Math.pow : public class PowerWithoutMathPow { public static void main(String[] args) { double base = 2; int exponent = 3; double result = 1; for (int i = 0; i < exponent; i++) { result *= base; } System.out.println(base + \" ^ \" + exponent + \" = \" + result); } } Calculate Square of a Number: public class SquareOfNumber { public static void main(String[] args) { double num = 5; double square = num * num; System.out.println(\"Square of \" + num + \" is: \" + square); } } Calculate Cube of a Number: public class CubeOfNumber { public static void main(String[] args) { double num = 3; double cube = num * num * num; System.out.println(\"Cube of \" + num + \" is: \" + cube); } } Calculate Square Root of a Number: public class SquareRootOfNumber { public static void main(String[] args) { double num = 16; double squareRoot = Math.sqrt(num); System.out.println(\"Square root of \" + num + \" is: \" + squareRoot); } } Calculate LCM of Two Numbers: public class LCM { public static void main(String[] args) { int num1 = 12; int num2 = 18; int gcd = findGCD(num1, num2); int lcm = (num1 * num2) / gcd; System.out.println(\"LCM of \" + num1 + \" and \" + num2 + \" is: \" + lcm); } public static int findGCD(int a, int b) { if (b == 0) { return a; } else { return findGCD(b, a % b); } } } Find G CD (HCF) of Two Numbers: public class GCD { public static void main(String[] args) { int num1 = 12; int num2 = 18; int gcd = findGCD(num1, num2); System.out.println(\"GCD of \" + num1 + \" and \" + num2 + \" is: \" + gcd); } public static int findGCD(int a, int b) { if (b == 0) { return a; } else { return findGCD(b, a % b); } } } Check Leap Year: public class LeapYear { public static void main(String[] args) { int year = 2024; if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) { System.out.println(year + \" is a leap year.\"); } else { System.out.println(year + \" is not a leap year.\"); } } } Convert Celsius to Fahrenheit: public class CelsiusToFahrenheit { public static void main(String[] args) { double celsius = 30; double fahrenheit = (celsius * 9/5) + 32; System.out.println(celsius + \"\u00b0C is equal to \" + fahrenheit + \"\u00b0F\"); } } Convert Fahrenheit to Celsius: public class FahrenheitToCelsius { public static void main(String[] args) { double fahrenheit = 86; double celsius = (fahrenheit - 32) * 5/9; System.out.println(fahrenheit + \"\u00b0F is equal to \" + celsius + \"\u00b0C\"); } } Calculate Simple Interest: public class SimpleInterest { public static void main(String[] args) { double principal = 1000; double rate = 5; double time = 2; double simpleInterest = (principal * rate * time) / 100; System.out.println(\"Simple Interest: \" + simpleInterest); } } These are the Java programs for the tasks you mentioned. You can copy and paste them into your Java development environment to run and test them.","title":"Java_Numbers"},{"location":"index1/","text":"Here are Java methods and programs for the tasks you mentioned: Remove a Given Character from a String: public class RemoveCharacterFromString { public static void main(String[] args) { String str = \"Hello, World!\"; char charToRemove = 'o'; String result = removeCharacter(str, charToRemove); System.out.println(\"String after removing '\" + charToRemove + \"': \" + result); } public static String removeCharacter(String str, char charToRemove) { StringBuilder result = new StringBuilder(); for (char c : str.toCharArray()) { if (c != charToRemove) { result.append(c); } } return result.toString(); } } Count Occurrence of a Given Character in a String: public class CountCharacterOccurrence { public static void main(String[] args) { String str = \"programming\"; char charToCount = 'g'; int count = countCharacter(str, charToCount); System.out.println(\"Occurrences of '\" + charToCount + \"': \" + count); } public static int countCharacter(String str, char charToCount) { int count = 0; for (char c : str.toCharArray()) { if (c == charToCount) { count++; } } return count; } } Check if Two Strings are Anagrams: import java.util.Arrays; public class AnagramCheck { public static void main(String[] args) { String str1 = \"listen\"; String str2 = \"silent\"; boolean isAnagram = areAnagrams(str1, str2); if (isAnagram) { System.out.println(str1 + \" and \" + str2 + \" are anagrams.\"); } else { System.out.println(str1 + \" and \" + str2 + \" are not anagrams.\"); } } public static boolean areAnagrams(String str1, String str2) { if (str1.length() != str2.length()) { return false; } char[] charArray1 = str1.toCharArray(); char[] charArray2 = str2.toCharArray(); Arrays.sort(charArray1); Arrays.sort(charArray2); return Arrays.equals(charArray1, charArray2); } } Check if a String is Palindrome: public class PalindromeCheck { public static void main(String[] args) { String str = \"racecar\"; boolean isPalindrome = isPalindrome(str); if (isPalindrome) { System.out.println(str + \" is a palindrome.\"); } else { System.out.println(str + \" is not a palindrome.\"); } } public static boolean isPalindrome(String str) { int left = 0; int right = str.length() - 1; while (left < right) { if (str.charAt(left) != str.charAt(right)) { return false; } left++; right--; } return true; } } Check if a Character is Vowel or Consonant: public class VowelConsonantCheck { public static void main(String[] args) { char ch = 'a'; if (isVowel(ch)) { System.out.println(ch + \" is a vowel.\"); } else { System.out.println(ch + \" is a consonant.\"); } } public static boolean isVowel(char ch) { ch = Character.toLowerCase(ch); return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'; } } Check if a Character is Digit or Not: public class DigitCheck { public static void main(String[] args) { char ch = '7'; if (isDigit(ch)) { System.out.println(ch + \" is a digit.\"); } else { System.out.println(ch + \" is not a digit.\"); } } public static boolean isDigit(char ch) { return Character.isDigit(ch); } } Replace Spaces with a Given Character: public class ReplaceSpaceWithCharacter { public static void main(String[] args) { String str = \"Hello World\"; char replacementChar = '-'; String result = replaceSpace(str, replacementChar); System.out.println(\"String after replacing spaces: \" + result); } public static String replaceSpace(String str, char replacementChar) { return str.replace(' ', replacementChar); } } Convert Lowercase Characters to Uppercase in a String: public class ConvertToLowerToUpper { public static void main(String[] args) { String str = \"hello world\"; String result = convertToLowerToUpper(str); System.out.println(\"String after converting to uppercase: \" + result); } public static String convertToLowerToUpper(String str) { return str.toUpperCase(); } } Convert Lowercase Vowels to Uppercase in a String: public class ConvertVowelsToLowerToUpper { public static void main(String[] args) { String str = \"hello world\"; String result = convertVowelsToLowerToUpper(str); System.out.println(\"String after converting vowels to uppercase: \" + result); } public static String convertVowelsToLowerToUpper(String str) { char[] chars = str.toCharArray(); for (int i = 0; i < chars.length; i++) { char ch = chars[i]; if (\"aeiou\".contains(String.valueOf(ch))) { chars[i] = Character.toUpperCase(ch); } } return new String(chars); } } Delete Vowels in a Given String: public class DeleteVowels { public static void main(String[] args) { String str = \"Hello, World!\"; String result = deleteVowels(str); System.out.println(\"String after deleting vowels: \" + result); } public static String deleteVowels(String str) { return str.replaceAll(\"[aeiouAEIOU]\", \"\"); } } Count Occurrence of Vowels and Consonants in a String: public class CountVowelsConsonants { public static void main(String[] args) { String str = \"Hello, World!\"; str = str.toLowerCase(); int vowels = 0; int consonants = 0; for (char ch : str.toCharArray()) { if (ch >= 'a' && ch <= 'z') { if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') { vowels++; } else { consonants++; } } } System.out.println(\"Vowels: \" + vowels); System.out.println(\"Consonants: \" + consonants); } } Print the Highest Frequency Character in a String: import java.util.HashMap; import java.util.Map; public class HighestFrequencyCharacter { public static void main(String[] args) { String str = \"programming\"; char highestFrequencyChar = findHighestFrequencyChar(str); System.out.println(\"Highest frequency character: \" + highestFrequencyChar); } public static char findHighestFrequencyChar(String str) { Map<Character, Integer> charFrequency = new HashMap<>(); for (char ch : str.toCharArray()) { charFrequency.put(ch, charFrequency.getOrDefault(ch, 0) + 1); } char highestFrequencyChar = ' '; int maxFrequency = 0; for (Map.Entry<Character, Integer> entry : charFrequency.entrySet()) { if (entry.getValue() > maxFrequency) { highestFrequencyChar = entry.getKey(); maxFrequency = entry.getValue(); } } return highestFrequencyChar; } } Replace First Occurrence of Vowel with '-': public class ReplaceFirstVowel { public static void main(String[] args) { String str = \"programming\"; String result = replaceFirstVowelWithDash(str); System.out.println(\"String after replacing first vowel: \" + result); } public static String replaceFirstVowelWithDash(String str) { for (int i = 0; i < str.length(); i++) { char ch = str.charAt(i); if (\"aeiouAEIOU\".indexOf(ch) != -1) { return str.substring(0, i) + \"-\" + str.substring(i + 1); } } return str; } } Count Alphabets, Digits, and Special Characters: public class CountCharacters { public static void main(String[] args) { String str = \"Hello123@\"; int alphabetCount = 0; int digitCount = 0; int specialCharCount = 0; for (char ch : str.toCharArray()) { if (Character.isLetter(ch)) { alphabetCount++; } else if (Character.isDigit(ch)) { digitCount++; } else { specialCharCount++; } } System.out.println(\"Alphabets: \" + alphabetCount); System.out.println(\"Digits: \" + digitCount); System.out.println(\"Special Characters: \" + specialCharCount); } } Remove Blank Spaces from a String: public class RemoveSpaces { public static void main(String[] args) { String str = \"Hello, World!\"; String result = removeSpaces(str); System.out.println(\"String after removing spaces: \" + result); } public static String removeSpaces(String str) { return str.replaceAll(\"\\\\s+\", \"\"); } } Concatenate Two Strings: public class ConcatenateStrings { public static void main(String[] args) { String str1 = \"Hello\"; String str2 = \"World\"; String concatenatedString = concatenateStrings(str1, str2); System.out.println(\"Concatenated String: \" + concatenatedString); } public static String concatenateStrings(String str1, String str2) { return str1 + str2; } } Remove Repeated Characters from a String: public class RemoveRepeatedCharacters { public static void main(String[] args) { String str = \"programming\"; String result = removeRepeatedCharacters(str); System.out.println(\"String after removing repeated characters: \" + result); } public static String removeRepeatedCharacters(String str) { StringBuilder result = new StringBuilder(); boolean[] visited = new boolean[256]; for (char ch : str.toCharArray()) { if (!visited[ch]) { result.append(ch); visited[ch] = true; } } return result.toString(); } } Calculate Sum of Integers in a String: public class SumOfIntegersInString { public static void main(String[] args) { String str = \"Hello123World456\"; int sum = sumOfIntegersInString(str); System.out.println(\"Sum of integers in the string: \" + sum); } public static int sumOfIntegersInString(String str) { int sum = 0; String[] numbers = str.split(\"\\\\D+\"); for (String num : numbers) { if (!num.isEmpty()) { sum += Integer.parseInt(num); } } return sum; } } Print All Non-Repeating Characters in a String: import java.util.HashMap; import java.util.Map; public class NonRepeatingCharacters { public static void main(String[] args) { String str = \"programming\"; String nonRepeatingChars = findNonRepeatingCharacters(str); System.out.println(\"Non-repeating characters: \" + nonRepeatingChars); } public static String findNonRepeatingCharacters(String str) { Map<Character, Integer> charCount = new HashMap<>(); StringBuilder result = new StringBuilder(); for (char ch : str.toCharArray()) { charCount.put(ch, charCount.getOrDefault(ch, 0) + 1); } for (char ch : str.toCharArray()) { if (charCount.get(ch) == 1) { result.append(ch); } } return result.toString(); } } Sort Characters of a String in Ascending Order: public class SortCharactersAscending { public static void main(String[] args) { String str = \"programming\"; String sortedStr = sortCharactersAscending(str); System.out.println(\"Sorted string in ascending order: \" + sortedStr); } public static String sortCharactersAscending(String str) { char[] charArray = str.toCharArray(); Arrays.sort(charArray); return new String(charArray); } } Sort Characters of a String in Descending Order: public class SortCharactersDescending { public static void main(String[] args) { String str = \"programming\"; String sortedStr = sortCharactersDescending(str); System.out.println(\"Sorted string in descending order: \" + sortedStr); } public static String sortCharactersDescending(String str) { char[] charArray = str.toCharArray(); Arrays.sort(charArray); return new StringBuilder(new String(charArray)).reverse().toString(); } } These are Java methods and programs for the specified tasks. You can use and adapt them as needed for your own applications.","title":"Java_String"}]}